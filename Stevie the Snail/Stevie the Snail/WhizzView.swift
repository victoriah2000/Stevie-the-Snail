//
// WhizzView.swift
// Generated by Core Animator version 1.4 on 12/4/17.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class WhizzPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class WhizzView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 1024, height: 768))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:1024, height:768)
		__scaling__.center = CGPoint(x:512.0, y:384.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let mosquito__root = WhizzPassthroughView()
		let mosquito__xScale = WhizzPassthroughView()
		let mosquito__yScale = WhizzPassthroughView()
		let mosquito = UIImageView()
		let imgAsset1 = UIImage(named:"Asset 1.png", in: bundle, compatibleWith: nil)
		if imgAsset1 == nil {
			print("** Warning: Could not create image from 'Asset 1.png'")
		}
		mosquito.image = imgAsset1
		mosquito.contentMode = .center
		mosquito.layer.anchorPoint = CGPoint(x:22.225, y:12.480)
		mosquito.bounds = CGRect(x:0, y:0, width:50.0, height:36.0)
		mosquito__root.layer.position = CGPoint(x:2250.000, y:750.000)
		mosquito__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mosquito__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mosquito__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(mosquito__root)
		mosquito__root.addSubview(mosquito__xScale)
		mosquito__xScale.addSubview(mosquito__yScale)
		mosquito__yScale.addSubview(mosquito)
		__scaling__.addSubview(mosquito__root)
		viewsByName["mosquito__root"] = mosquito__root
		viewsByName["mosquito__xScale"] = mosquito__xScale
		viewsByName["mosquito__yScale"] = mosquito__yScale
		viewsByName["mosquito"] = mosquito

		let jim__root = WhizzPassthroughView()
		let jim__xScale = WhizzPassthroughView()
		let jim__yScale = WhizzPassthroughView()
		let jim = UIImageView()
		let imgJim = UIImage(named:"jim.png", in: bundle, compatibleWith: nil)
		if imgJim == nil {
			print("** Warning: Could not create image from 'jim.png'")
		}
		jim.image = imgJim
		jim.contentMode = .center
		jim.bounds = CGRect(x:0, y:0, width:100.0, height:100.0)
		jim__root.layer.position = CGPoint(x:1138.000, y:244.031)
		jim__xScale.transform = CGAffineTransform(scaleX: 0.65, y: 1.00)
		jim__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.65)
		jim__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(jim__root)
		jim__root.addSubview(jim__xScale)
		jim__xScale.addSubview(jim__yScale)
		jim__yScale.addSubview(jim)
		__scaling__.addSubview(jim__root)
		viewsByName["jim__root"] = jim__root
		viewsByName["jim__xScale"] = jim__xScale
		viewsByName["jim__yScale"] = jim__yScale
		viewsByName["jim"] = jim

		let bob__root = WhizzPassthroughView()
		let bob__xScale = WhizzPassthroughView()
		let bob__yScale = WhizzPassthroughView()
		let bob = UIImageView()
		let imgBob = UIImage(named:"bob.png", in: bundle, compatibleWith: nil)
		if imgBob == nil {
			print("** Warning: Could not create image from 'bob.png'")
		}
		bob.image = imgBob
		bob.contentMode = .center
		bob.bounds = CGRect(x:0, y:0, width:100.0, height:100.0)
		bob__root.layer.position = CGPoint(x:1186.000, y:172.031)
		bob__xScale.transform = CGAffineTransform(scaleX: 0.50, y: 1.00)
		bob__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.50)
		bob__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(bob__root)
		bob__root.addSubview(bob__xScale)
		bob__xScale.addSubview(bob__yScale)
		bob__yScale.addSubview(bob)
		__scaling__.addSubview(bob__root)
		viewsByName["bob__root"] = bob__root
		viewsByName["bob__xScale"] = bob__xScale
		viewsByName["bob__yScale"] = bob__yScale
		viewsByName["bob"] = bob

		self.viewsByName = viewsByName
	}

	// - MARK: fly

	func addFlyAnimation() {
		addFlyAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addFlyAnimation(completion: ((Bool) -> Void)?) {
		addFlyAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addFlyAnimation(removedOnCompletion: Bool) {
		addFlyAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addFlyAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addFlyAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addFlyAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 3.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Fly")
			self.animationCompletions[layer.animation(forKey: "Fly")!] = complete
		}

		let mosquitoImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		mosquitoImageContentsAnimation.duration = 3.000
		mosquitoImageContentsAnimation.values = [UIImage(named: "Asset 1", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Asset 1", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Asset 1", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Asset 1", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		mosquitoImageContentsAnimation.keyTimes = [0.000, 0.001, 0.042, 1.000] as [NSNumber]
		mosquitoImageContentsAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mosquitoImageContentsAnimation.beginTime = beginTime
		mosquitoImageContentsAnimation.fillMode = fillMode
		mosquitoImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["mosquito"]?.layer.add(mosquitoImageContentsAnimation, forKey:"fly_ImageContents")

		let mosquitoTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mosquitoTranslationXAnimation.duration = 3.000
		mosquitoTranslationXAnimation.values = [0.000, 0.000, 0.000, -1360.000, -1360.000, -1360.000, -1360.000, -1358.594, -1357.945, -1357.297, -1356.000, -1352.539, -1351.133, -1349.727, -1346.914, -1343.227, -1340.414, -1336.727, -1333.914, -1331.102, -1326.008, -1323.195, -1321.141, -1319.734, -1319.086, -1316.492, -1315.195, -1314.547, -1313.898, -1313.250, -1312.602, -1311.953, -1311.305, -1306.969, -1297.062, -1291.500, -1279.922, -1276.656, -1271.094, -1255.672, -1243.227, -1230.781, -1209.680, -1202.797, -1169.547, -1141.680, -1134.797, -1114.789, -1094.273, -1088.711, -1065.445, -1051.055, -1046.695, -1025.648, -1011.367, -1007.008, -1002.648, -990.664, -986.305, -975.062, -971.797, -940.023, -914.453, -880.797, -864.930, -840.039, -828.914, -814.633, -809.070, -800.352, -795.992, -790.430, -782.805, -761.008, -751.086, -744.203, -737.320, -724.875, -717.992, -709.680, -693.055, -686.172, -652.922, -644.609, -607.336, -583.828, -552.008, -545.125, -514.734, -479.938, -453.453, -443.594, -407.250, -374.000, -349.062, -342.180, -313.219, -306.336, -292.570, -285.688, -281.328, -270.203, -257.758, -243.477, -239.117, -227.133, -211.531, -205.969, -193.523, -186.641, -182.281, -168.516, -157.391, -146.266, -146.266, -146.266, -1360.783, -1360.000, -1360.000] as [Float]
		mosquitoTranslationXAnimation.keyTimes = [0.000, 0.000, 0.000, 0.001, 0.001, 0.001, 0.099, 0.099, 0.102, 0.106, 0.112, 0.119, 0.122, 0.123, 0.129, 0.134, 0.141, 0.148, 0.150, 0.156, 0.164, 0.168, 0.176, 0.179, 0.180, 0.190, 0.197, 0.200, 0.208, 0.218, 0.227, 0.230, 0.235, 0.241, 0.249, 0.251, 0.259, 0.261, 0.262, 0.267, 0.275, 0.278, 0.288, 0.290, 0.301, 0.311, 0.313, 0.324, 0.333, 0.336, 0.346, 0.355, 0.357, 0.367, 0.377, 0.379, 0.380, 0.390, 0.391, 0.398, 0.401, 0.413, 0.424, 0.438, 0.442, 0.454, 0.458, 0.468, 0.469, 0.476, 0.478, 0.479, 0.486, 0.497, 0.505, 0.506, 0.508, 0.515, 0.518, 0.519, 0.526, 0.529, 0.539, 0.542, 0.553, 0.564, 0.573, 0.576, 0.586, 0.597, 0.606, 0.608, 0.619, 0.629, 0.639, 0.642, 0.652, 0.654, 0.660, 0.663, 0.664, 0.671, 0.674, 0.683, 0.686, 0.693, 0.701, 0.703, 0.710, 0.713, 0.715, 0.720, 0.727, 0.740, 0.742, 0.742, 0.875, 1.000, 1.000] as [NSNumber]
		mosquitoTranslationXAnimation.timingFunctions = [instantTiming, instantTiming, linearTiming, instantTiming, instantTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, linearTiming, easeInOutTiming]
		mosquitoTranslationXAnimation.beginTime = beginTime
		mosquitoTranslationXAnimation.fillMode = fillMode
		mosquitoTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["mosquito__root"]?.layer.add(mosquitoTranslationXAnimation, forKey:"fly_TranslationX")

		let mosquitoTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mosquitoTranslationYAnimation.duration = 3.000
		mosquitoTranslationYAnimation.values = [0.000, 0.000, 0.000, 0.000, 0.000, -1.414, -2.125, -2.781, -3.438, -2.497, -1.403, -0.427, 2.690, 4.769, 5.745, 7.815, 9.722, 10.644, 14.347, 17.003, 17.870, 21.503, 23.237, 24.104, 24.972, 25.784, 27.683, 28.659, 29.698, 30.620, 31.376, 34.493, 35.532, 40.540, 43.595, 47.689, 48.665, 52.697, 59.040, 64.290, 65.384, 70.743, 72.822, 73.861, 74.837, 74.837, 72.897, 71.967, 71.967, 71.967, 71.967, 43.843, 0.000] as [Float]
		mosquitoTranslationYAnimation.keyTimes = [0.000, 0.001, 0.001, 0.001, 0.164, 0.164, 0.176, 0.180, 0.200, 0.278, 0.288, 0.290, 0.301, 0.311, 0.313, 0.324, 0.333, 0.336, 0.346, 0.355, 0.357, 0.367, 0.377, 0.380, 0.391, 0.401, 0.413, 0.424, 0.438, 0.454, 0.529, 0.539, 0.542, 0.553, 0.564, 0.573, 0.576, 0.586, 0.597, 0.606, 0.608, 0.619, 0.629, 0.639, 0.642, 0.726, 0.727, 0.740, 0.742, 0.742, 1.000, 1.000, 1.000] as [NSNumber]
		mosquitoTranslationYAnimation.timingFunctions = [easeInOutTiming, instantTiming, instantTiming, instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, linearTiming, instantTiming, instantTiming, instantTiming, instantTiming, easeInOutTiming]
		mosquitoTranslationYAnimation.beginTime = beginTime
		mosquitoTranslationYAnimation.fillMode = fillMode
		mosquitoTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["mosquito__root"]?.layer.add(mosquitoTranslationYAnimation, forKey:"fly_TranslationY")

		let jimImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		jimImageContentsAnimation.duration = 3.000
		jimImageContentsAnimation.values = [UIImage(named: "jim", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Asset 10", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Asset 10", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Asset 10", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Asset 10", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Asset 10", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		jimImageContentsAnimation.keyTimes = [0.000, 0.001, 0.042, 1.000, 1.000, 1.000] as [NSNumber]
		jimImageContentsAnimation.timingFunctions = [linearTiming, easeInOutTiming, linearTiming, linearTiming, linearTiming]
		jimImageContentsAnimation.beginTime = beginTime
		jimImageContentsAnimation.fillMode = fillMode
		jimImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["jim"]?.layer.add(jimImageContentsAnimation, forKey:"fly_ImageContents")

		let jimScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		jimScaleXAnimation.duration = 3.000
		jimScaleXAnimation.values = [0.650, 0.650, 0.640, 0.650, 0.650, 0.650] as [Float]
		jimScaleXAnimation.keyTimes = [0.000, 0.001, 0.042, 0.999, 1.000, 1.000] as [NSNumber]
		jimScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, linearTiming, easeInOutTiming, linearTiming]
		jimScaleXAnimation.beginTime = beginTime
		jimScaleXAnimation.fillMode = fillMode
		jimScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["jim__xScale"]?.layer.add(jimScaleXAnimation, forKey:"fly_ScaleX")

		let jimScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		jimScaleYAnimation.duration = 3.000
		jimScaleYAnimation.values = [0.650, 0.650, 0.640, 0.649, 0.650] as [Float]
		jimScaleYAnimation.keyTimes = [0.000, 0.001, 0.042, 1.000, 1.000] as [NSNumber]
		jimScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, linearTiming, easeInOutTiming]
		jimScaleYAnimation.beginTime = beginTime
		jimScaleYAnimation.fillMode = fillMode
		jimScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["jim__yScale"]?.layer.add(jimScaleYAnimation, forKey:"fly_ScaleY")

		let jimTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		jimTranslationXAnimation.duration = 3.000
		jimTranslationXAnimation.values = [0.000, 0.000, -1240.000, -1201.692] as [Float]
		jimTranslationXAnimation.keyTimes = [0.000, 0.001, 0.708, 1.000] as [NSNumber]
		jimTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, linearTiming]
		jimTranslationXAnimation.beginTime = beginTime
		jimTranslationXAnimation.fillMode = fillMode
		jimTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["jim__root"]?.layer.add(jimTranslationXAnimation, forKey:"fly_TranslationX")

		let jimTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		jimTranslationYAnimation.duration = 3.000
		jimTranslationYAnimation.values = [0.000, 0.000, 0.000, 11.038, 10.384, 20.384, 34.894, 44.534, 44.534, 30.000, 30.000, 4.782, 4.134] as [Float]
		jimTranslationYAnimation.keyTimes = [0.000, 0.000, 0.000, 0.001, 0.004, 0.004, 0.022, 0.026, 0.041, 0.041, 0.042, 1.000, 1.000] as [NSNumber]
		jimTranslationYAnimation.timingFunctions = [instantTiming, instantTiming, easeInOutTiming, linearTiming, linearTiming, linearTiming, linearTiming, instantTiming, instantTiming, easeInOutTiming, linearTiming, easeInOutTiming]
		jimTranslationYAnimation.beginTime = beginTime
		jimTranslationYAnimation.fillMode = fillMode
		jimTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["jim__root"]?.layer.add(jimTranslationYAnimation, forKey:"fly_TranslationY")

		let bobImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		bobImageContentsAnimation.duration = 3.000
		bobImageContentsAnimation.values = [UIImage(named: "Asset 10", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Asset 10", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "bob", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "bob", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "bob", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		bobImageContentsAnimation.keyTimes = [0.000, 0.001, 0.042, 1.000, 1.000] as [NSNumber]
		bobImageContentsAnimation.timingFunctions = [linearTiming, easeInOutTiming, linearTiming, linearTiming]
		bobImageContentsAnimation.beginTime = beginTime
		bobImageContentsAnimation.fillMode = fillMode
		bobImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["bob"]?.layer.add(bobImageContentsAnimation, forKey:"fly_ImageContents")

		let bobTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		bobTranslationXAnimation.duration = 3.000
		bobTranslationXAnimation.values = [-3.004, -103.004, -1319.208, -1329.208] as [Float]
		bobTranslationXAnimation.keyTimes = [0.000, 0.001, 1.000, 1.000] as [NSNumber]
		bobTranslationXAnimation.timingFunctions = [easeInOutTiming, linearTiming, linearTiming]
		bobTranslationXAnimation.beginTime = beginTime
		bobTranslationXAnimation.fillMode = fillMode
		bobTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["bob__root"]?.layer.add(bobTranslationXAnimation, forKey:"fly_TranslationX")

		let bobTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		bobTranslationYAnimation.duration = 3.000
		bobTranslationYAnimation.values = [-3.004, -3.004, 16.501, 87.665, -96.143, -61.410, -28.137] as [Float]
		bobTranslationYAnimation.keyTimes = [0.000, 0.001, 0.292, 0.333, 0.750, 0.792, 1.000] as [NSNumber]
		bobTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		bobTranslationYAnimation.beginTime = beginTime
		bobTranslationYAnimation.fillMode = fillMode
		bobTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["bob__root"]?.layer.add(bobTranslationYAnimation, forKey:"fly_TranslationY")
	}

	func removeFlyAnimation() {
		self.layer.removeAnimation(forKey: "Fly")
		self.viewsByName["mosquito"]?.layer.removeAnimation(forKey: "fly_ImageContents")
		self.viewsByName["mosquito__root"]?.layer.removeAnimation(forKey: "fly_TranslationX")
		self.viewsByName["mosquito__root"]?.layer.removeAnimation(forKey: "fly_TranslationY")
		self.viewsByName["jim"]?.layer.removeAnimation(forKey: "fly_ImageContents")
		self.viewsByName["jim__xScale"]?.layer.removeAnimation(forKey: "fly_ScaleX")
		self.viewsByName["jim__yScale"]?.layer.removeAnimation(forKey: "fly_ScaleY")
		self.viewsByName["jim__root"]?.layer.removeAnimation(forKey: "fly_TranslationX")
		self.viewsByName["jim__root"]?.layer.removeAnimation(forKey: "fly_TranslationY")
		self.viewsByName["bob"]?.layer.removeAnimation(forKey: "fly_ImageContents")
		self.viewsByName["bob__root"]?.layer.removeAnimation(forKey: "fly_TranslationX")
		self.viewsByName["bob__root"]?.layer.removeAnimation(forKey: "fly_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Fly")
	}
}